#!/usr/bin/env python3

import redis
import sys
import ipcalc
import os


pubkey = sys.argv[1]
if len(sys.argv) > 2:
    endpoint = sys.argv[2]
else:
    endpoint = False

if not pubkey:
    sys.stderr.write('Missing pubkey argument\n')
    exit(1)

r = redis.Redis(host='127.0.0.1', port=6379, db=0, decode_responses=True)

r.setnx('cluster/network', '10.5.4.0/24') # default value! set it before calling this script for the 1st time
r.incr('cluster/nodecount')
nodeid = int(r.get('cluster/nodecount'))
if nodeid == 1: 
    r.setnx('cluster/master', nodeid)

network = r.get('cluster/network')
ipaddr = str(ipcalc.Network(network).network() + nodeid)
r.setnx(f'cluster/nodes/{nodeid}/listenport', '55820')
r.set(f'cluster/nodes/{nodeid}/pubkey', pubkey)
r.set(f'cluster/nodes/{nodeid}/ipaddr', ipaddr)
if endpoint:
    r.set(f'cluster/nodes/{nodeid}/endpoint', endpoint)

pipe = r.pipeline()

pipe.set(f'traefik{nodeid}', '')
pipe.hset(f'module/traefik{nodeid}/module.env', mapping={'LE_EMAIL': 'root@localhost', 'EVENTS_IMAGE': 'ghcr.io/nethserver/traefik:latest'})
pipe.set(f'module/traefik{nodeid}/nodeid', nodeid)

pipe.hset(f'module/restic{nodeid}/module.env', mapping={'EVENTS_IMAGE': 'ghcr.io/nethserver/restic-server:latest'})
pipe.set(f'module/restic{nodeid}/nodeid', nodeid)

pipe.execute()


if nodeid == 1:
    #
    # Setup the first master node of a new cluster
    #
    with open('/etc/wireguard/privatekey') as pkh:
        master_privatekey = pkh.read().strip()

    # Truncate WireGuard configuration and ensure the file exists:
    with open('/etc/wireguard/wg0.conf', 'w') as wgconf:
        wgconf.write(f"[Interface]\n")
        wgconf.write(f"Address = {ipaddr}\n")
        wgconf.write(f"ListenPort = {r.get(f'cluster/nodes/{nodeid}/listenport')}\n")
        wgconf.write(f"PrivateKey = {master_privatekey}\n\n")

    print('Enable and start WireGuard wg0 interface...\n')
    exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'enable', 'wg-quick@wg0')
    assert exit_code == 0
    exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'restart', 'wg-quick@wg0')
    assert exit_code == 0

    with open('/etc/redis.env', 'w') as env_file:
        env_file.write(f'EXTRA_PARAMS="--bind 127.0.0.1 ::1 {ipaddr} --protected-mode no"\n')

    print('Restarting Redis...\n')
    exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'restart', 'redis')
    assert exit_code == 0


else:
    #
    # Add a new node to the cluster
    #
    with open('/etc/wireguard/wg0.conf', 'a') as wgconf:
        wgconf.write(f'[Peer]\n')
        wgconf.write(f'PublicKey = {pubkey}\n')
        wgconf.write(f'AllowedIPs = {ipaddr}\n')
        if endpoint:
            wgconf.write(f'Endpoint = {endpoint}\n')

    print('Restarting WireGuard wg0 interface...\n')
    exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'restart', 'wg-quick@wg0')
    assert exit_code == 0

    master_nodeid = r.get('cluster/master')
    master_ipaddr = r.get(f'cluster/nodes/{master_nodeid}/ipaddr')
    master_endpoint = r.get(f'cluster/nodes/{master_nodeid}/endpoint')
    master_pubkey = r.get(f'cluster/nodes/{master_nodeid}/pubkey')

    node_ipaddr = str(ipcalc.Network(network) + nodeid)

    print(f'Node {nodeid} added to the cluster!\n')
    print(f'Complete the join procedure with the following command:\n\n')
    print(f'    nodejoin {node_ipaddr} {master_ipaddr} {master_endpoint} {master_pubkey}\n\n')
