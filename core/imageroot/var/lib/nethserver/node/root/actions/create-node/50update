#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import redis

agent_id = os.getenv('AGENT_ID')
redis_host = os.getenv('REDIS_ADDRESS', '127.0.0.1:6379').split(':', 1)[0]
redis_port = os.getenv('REDIS_ADDRESS', '127.0.0.1:6379').split(':', 1)[1]
redis_username = os.getenv('REDIS_USERNAME', agent_id)
redis_password = os.getenv('REDIS_PASSWORD', '')
r = redis.Redis(host=redis_host, port=redis_port, db=0, username=redis_username, password=redis_password, retry_on_timeout=True)

#
# When a node is created, add the core Traefik module to it
#
task_id = f"{agent_id}-create-module-traefik"

pubsub = r.pubsub()
pubsub.subscribe(f'progress/task/{task_id}')

r.lpush(f'{agent_id}/tasks', json.dumps({
    "id": task_id,
    "action": "add-module",
    "data": json.dumps({
        "image": "traefik"
    }),
}))

for message in pubsub.listen():
    try:
        data = json.loads(message['data'])
    except Exception e:
        print(f"[ERROR] {e}")
        exit(1)

    if data['status'] == 'finished':
        pubsub.close()
        break

exit_code = int(r.get(f'{agent_id}/task/{task_id}/exit_code'))
if exit_code == 0:


#
# Start the traefik agent for this node. We override the default module home directory path.
#
with open('/etc/nethserver/traefik.env', 'w') as node_file:
    node_file.write(f'AGENT_ID=traefik-{nodeid}\n')
exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'enable', 'agent@node.service')
assert exit_code == 0
exit_code = os.spawnlp(os.P_WAIT, 'systemctl', 'systemctl', 'restart', 'agent@node.service')
assert exit_code == 0